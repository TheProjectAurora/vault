{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to the NorthCode knowledge vault! This is the place where we collectively share what we have learned about working with DevOps and the cloud services.","title":"Home"},{"location":"#welcome","text":"Welcome to the NorthCode knowledge vault! This is the place where we collectively share what we have learned about working with DevOps and the cloud services.","title":"Welcome"},{"location":"azure/","text":"Microsoft Azure","title":"Microsoft Azure"},{"location":"azure/#microsoft-azure","text":"","title":"Microsoft Azure"},{"location":"azure/azure-devops/","text":"Azure DevOps What is Azure DevOps? Azure DevOps is a series of collaboration and automation tools, formerly known as Visual Studio Team Services. The currently available components are: Azure Boards for project tracking with Agile methods, Azure Pipelines for building and releasing with continuous integration, Azure Repos for storing source code in Git repositories, Azure Test Plans for keeping track of manual and exploratory testing, and Azure Artifacts for storing and sharing code packages. Azure DevOps combines tools to track your work as well as to deploy and test code changes. After all, DevOps is all about the tight feedback loop so that you can build and release often with confidence. If you're already using Azure, then using Azure DevOps is pretty much a no-brainer since it is well integrated in the ecosystem. Even if you're using some other public cloud, such as AWS, you can still use Azure DevOps to track your projects. AWS actually has a Toolkit for Azure DevOps which integrates with some AWS services and lets you run CloudFormation templates to manage your AWS resources. For each Azure DevOps component you can find a replacement from elsewhere. You can track work in Jira, keep code in GitHub, and store packages in Artifactory. Each one of these is a perfectly fine product on their own. The main benefit of Azure DevOps comes from having everything in the same place without having to integrate everything manually. The Extension Marketplace contains integrations to different services, so you could create work items from Slack conversations, or automatically deploy your mobile app to the Apple App Store.","title":"Azure DevOps"},{"location":"azure/azure-devops/#azure-devops","text":"","title":"Azure DevOps"},{"location":"azure/azure-devops/#what-is-azure-devops","text":"Azure DevOps is a series of collaboration and automation tools, formerly known as Visual Studio Team Services. The currently available components are: Azure Boards for project tracking with Agile methods, Azure Pipelines for building and releasing with continuous integration, Azure Repos for storing source code in Git repositories, Azure Test Plans for keeping track of manual and exploratory testing, and Azure Artifacts for storing and sharing code packages. Azure DevOps combines tools to track your work as well as to deploy and test code changes. After all, DevOps is all about the tight feedback loop so that you can build and release often with confidence. If you're already using Azure, then using Azure DevOps is pretty much a no-brainer since it is well integrated in the ecosystem. Even if you're using some other public cloud, such as AWS, you can still use Azure DevOps to track your projects. AWS actually has a Toolkit for Azure DevOps which integrates with some AWS services and lets you run CloudFormation templates to manage your AWS resources. For each Azure DevOps component you can find a replacement from elsewhere. You can track work in Jira, keep code in GitHub, and store packages in Artifactory. Each one of these is a perfectly fine product on their own. The main benefit of Azure DevOps comes from having everything in the same place without having to integrate everything manually. The Extension Marketplace contains integrations to different services, so you could create work items from Slack conversations, or automatically deploy your mobile app to the Apple App Store.","title":"What is Azure DevOps?"},{"location":"azure/azure-infra-as-code/","text":"Infrastructure as Code in Azure Infrastructure as Code is the modern way to provision resources in the cloud. Instead of hand crafting the service through the web console you define the desired state in files that can be stored in version control. This gives you the capability to rebuild your production system when something goes wrong. With Azure you have different options to choose from. Let's go through the pros and cons for each of them. ARM Templates Azure Resource Manager (ARM) is the service that handles all resource deployment and management whether you were using the Azure portal, CLI, PowerShell or REST clients. ARM templates are JSON files that define the needed resources and their configurations. You can then perform the deployment from the command line using PowerShell or Azure CLI, or the template can be used in a continuous integration pipeline. Pros automatically feature-complete Cons it is JSON Bicep Bicep is the new Domain Specific Language that can be used to define ARM templates in a declarative way. The Bicep language has its own syntax which is then transparently transpiled to a valid ARM template. In order to get started you need to have the Bicep CLI. You can also install the Bicep VS Code extension for a nicer experience on Visual Studio Code. Just follow the official installation instructions . Pros automatically feature-complete not JSON existing ARM templates can be automatically migrated Cons Azure only yet another syntax to learn Terraform Terraform is a popular IaC tool that supports all major clouds. When you learn it once you can transfer those skills to other clouds too. It is independent of the cloud providers and open source, so it's not favouring one cloud provider over the other. Terraform enables you to configure reproducible multi-cloud environments. Atlantis adds another layer on top of Terraform management by automating the deployments through a pull request workflow. It listens to webhooks from GitHub, GitLab, Bitbucket or Azure DevOps and interacts with you through pull request comments. Pros supports all major clouds skills are applicable in a wider array of projects Cons it might take some time until new features are supported","title":"Infrastructure as Code in Azure"},{"location":"azure/azure-infra-as-code/#infrastructure-as-code-in-azure","text":"Infrastructure as Code is the modern way to provision resources in the cloud. Instead of hand crafting the service through the web console you define the desired state in files that can be stored in version control. This gives you the capability to rebuild your production system when something goes wrong. With Azure you have different options to choose from. Let's go through the pros and cons for each of them.","title":"Infrastructure as Code in Azure"},{"location":"azure/azure-infra-as-code/#arm-templates","text":"Azure Resource Manager (ARM) is the service that handles all resource deployment and management whether you were using the Azure portal, CLI, PowerShell or REST clients. ARM templates are JSON files that define the needed resources and their configurations. You can then perform the deployment from the command line using PowerShell or Azure CLI, or the template can be used in a continuous integration pipeline. Pros automatically feature-complete Cons it is JSON","title":"ARM Templates"},{"location":"azure/azure-infra-as-code/#bicep","text":"Bicep is the new Domain Specific Language that can be used to define ARM templates in a declarative way. The Bicep language has its own syntax which is then transparently transpiled to a valid ARM template. In order to get started you need to have the Bicep CLI. You can also install the Bicep VS Code extension for a nicer experience on Visual Studio Code. Just follow the official installation instructions . Pros automatically feature-complete not JSON existing ARM templates can be automatically migrated Cons Azure only yet another syntax to learn","title":"Bicep"},{"location":"azure/azure-infra-as-code/#terraform","text":"Terraform is a popular IaC tool that supports all major clouds. When you learn it once you can transfer those skills to other clouds too. It is independent of the cloud providers and open source, so it's not favouring one cloud provider over the other. Terraform enables you to configure reproducible multi-cloud environments. Atlantis adds another layer on top of Terraform management by automating the deployments through a pull request workflow. It listens to webhooks from GitHub, GitLab, Bitbucket or Azure DevOps and interacts with you through pull request comments. Pros supports all major clouds skills are applicable in a wider array of projects Cons it might take some time until new features are supported","title":"Terraform"}]}